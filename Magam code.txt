MAGMA code for generating csv file for GUDHI:


T:=Open("D:\\Magmaresults\\Gxfx_x3_n5.csv","w");
n := 5;
q := 2^n;
Fp := GF(2);
Fq := GF(q);
ksi := Fq.1;
R<X> := PolynomialRing(Fq);
f := X^3;//A Gold function which is APN
seq_Gxfx := [];
for i in [0..q-2] do
	seq_Gxfx := seq_Gxfx cat Eltseq(ksi^i) cat Eltseq(Evaluate(f, ksi^i));
end for;
Gxfx := Matrix(q-1, 2*n,seq_Gxfx);
//need to transpose them later, respectively
Gxfx := Transpose(Gxfx);
C := LinearCode(Gxfx);

S := [];
for c in C do
		Append(~S, c);
end for;
 M := ZeroMatrix(Integers(), #C, #C);
for i in [1..#S] do
for j in [i+1..#S] do
M[j][i]:=Distance(S[i],S[j]);
M[i][j]:=Distance(S[i],S[j]);
end for;
end for;
for i in [1..#S] do
for j in [1..#S] do
fprintf T, "%o", M[i][j];
if j eq #S then
fprintf T, "\n";
else 
fprintf T, ",";
end if;
end for;
end for;
delete T;
clear;


-----------------------------------------------
MAGMA code for computing number of 2-simplices and 1-simplices and 2-rank:

n :=7;
q := 2^n;
Fp := GF(2);
Fq := GF(q);
ksi := Fq.1;

R<X> := PolynomialRing(Fq);
f := X^3;//A Gold function which is APN
//f:=X^5;
//f := X^3+X^20+X^34+X^66;
//f := X^3+X^12+X^40+X^72;
//f := X^3+X^12+X^17+X^33;

seq_Gxfx := [];


for i in [0..q-2] do
	seq_Gxfx := seq_Gxfx cat Eltseq(ksi^i) cat Eltseq(Evaluate(f, ksi^i));
end for;
Gxfx := Matrix(q-1, 2*n,seq_Gxfx);
//need to transpose them later, respectively
Gxfx := Transpose(Gxfx);
C := LinearCode(Gxfx);
WeightDistribution(C);
weight_short := WeightDistribution(C)[2][1];

seq_C_short := [];
for c in C do
	if Weight(c) eq weight_short then
		Append(~seq_C_short, c);
	end if;
end for;

N := #seq_C_short;

M_short := Matrix(N,N,[0:i in [1..N^2]]);

for i in [1..N] do
	for j in [i+1..N] do
		if Weight(seq_C_short[i]-seq_C_short[j]) eq weight_short then
			M_short[i][j] := 1;
			M_short[j][i] := 1;
		end if;
	end for;
end for;

M3 := M_short^3;
Trace(M3);
SS := {* *};
for i in [1..NumberOfRows(M3)] do
Include(~SS,M3[i][i]);
end for;
SS;

pM_short := Matrix(N,N,[GF(2)! i: i in Eltseq(M_short)]);
Rank(pM_short);

v_1 := Matrix(1,N,[1: i in [1..N]]);
v_1*M_short*Transpose(v_1);
clear;

-----------------
MAGMA code for computing \tilde{C}_f:

n := 7;
q := 2^n;
Fp := GF(2);
Fq := GF(q);
ksi := Fq.1;

R<X> := PolynomialRing(Fq);
f := X^3;//A Gold function which is APN
//f := X^3+X^20+X^34+X^66;
//f := X^3+X^12+X^40+X^72;

seq_Gxfx := [];


for a in Fq do
	seq_Gxfx := seq_Gxfx cat [Fp! 1] cat Eltseq(a) cat Eltseq(Evaluate(f, a));
end for;
Gxfx := Matrix(q, 2*n+1,seq_Gxfx);
//need to transpose them later, respectively
Gxfx := Transpose(Gxfx);
C := LinearCode(Gxfx);CC:=Dual(C);
WeightDistribution(C);
weight_short := WeightDistribution(C)[2][1];

seq_C_short := [];
for c in C do
	if Weight(c) eq weight_short then
		Append(~seq_C_short, c);
	end if;
end for;

N := #seq_C_short;

M_short := Matrix(N,N,[0:i in [1..N^2]]);

for i in [1..N] do
	for j in [i+1..N] do
		if Weight(seq_C_short[i]-seq_C_short[j]) eq weight_short then
			M_short[i][j] := 1;
			M_short[j][i] := 1;
		end if;
	end for;
end for;

M3 := M_short^3;
Trace(M3);
SS := {* *};
for i in [1..NumberOfRows(M3)] do
Include(~SS,M3[i][i]);
end for;
SS;

pM_short := Matrix(N,N,[GF(2)! i: i in Eltseq(M_short)]);
Rank(pM_short);

v_1 := Matrix(1,N,[1: i in [1..N]]);
v_1*M_short*Transpose(v_1);
clear;